// Code generated by protoc-gen-go.
// source: pin_update.proto
// DO NOT EDIT!

package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpdateRequest struct {
	Id          int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId      int32    `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Title       string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Url         string   `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Phrase      string   `protobuf:"bytes,5,opt,name=phrase" json:"phrase,omitempty"`
	Timestamp   int64    `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Description string   `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UpdateRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdateRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *UpdateRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "spec.UpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpdatePin service

type UpdatePinClient interface {
	Execute(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*PinResponse, error)
}

type updatePinClient struct {
	cc *grpc.ClientConn
}

func NewUpdatePinClient(cc *grpc.ClientConn) UpdatePinClient {
	return &updatePinClient{cc}
}

func (c *updatePinClient) Execute(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*PinResponse, error) {
	out := new(PinResponse)
	err := grpc.Invoke(ctx, "/spec.UpdatePin/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdatePin service

type UpdatePinServer interface {
	Execute(context.Context, *UpdateRequest) (*PinResponse, error)
}

func RegisterUpdatePinServer(s *grpc.Server, srv UpdatePinServer) {
	s.RegisterService(&_UpdatePin_serviceDesc, srv)
}

func _UpdatePin_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdatePinServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.UpdatePin/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdatePinServer).Execute(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdatePin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spec.UpdatePin",
	HandlerType: (*UpdatePinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _UpdatePin_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pin_update.proto",
}

func init() { proto.RegisterFile("pin_update.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xc3, 0x40,
	0x10, 0x84, 0xf1, 0x6f, 0xf0, 0x22, 0x50, 0x58, 0x10, 0x3a, 0x45, 0x14, 0x56, 0x2a, 0x57, 0x2e,
	0xc8, 0x0b, 0xd0, 0x50, 0xd0, 0x45, 0x27, 0x51, 0x47, 0xc6, 0x5e, 0xc1, 0x4a, 0xc9, 0xf9, 0xb8,
	0xdb, 0x93, 0x78, 0x47, 0x5e, 0x0a, 0xf9, 0x6c, 0x09, 0xd2, 0xcd, 0x7c, 0xbb, 0x53, 0xcc, 0xc0,
	0xda, 0xb2, 0x39, 0x04, 0x3b, 0x74, 0x42, 0xad, 0x75, 0xa3, 0x8c, 0x98, 0x7b, 0x4b, 0xfd, 0x06,
	0x1d, 0x79, 0x3b, 0x1a, 0x4f, 0x07, 0xcb, 0x66, 0xbe, 0x6c, 0x7f, 0x12, 0xb8, 0x7e, 0x8b, 0xaf,
	0x9a, 0xbe, 0x02, 0x79, 0xc1, 0x1b, 0x48, 0x79, 0x50, 0x49, 0x9d, 0x34, 0x85, 0x4e, 0x79, 0xc0,
	0x07, 0x28, 0x83, 0x27, 0xf7, 0x3a, 0xa8, 0x34, 0xb2, 0xc5, 0xe1, 0x3d, 0x14, 0xc2, 0x72, 0x24,
	0x95, 0xd5, 0x49, 0x53, 0xe9, 0xd9, 0xe0, 0x1a, 0xb2, 0xe0, 0x8e, 0x2a, 0x8f, 0x6c, 0x92, 0x53,
	0xde, 0x7e, 0xba, 0xce, 0x93, 0x2a, 0x22, 0x5c, 0x1c, 0x3e, 0x42, 0x25, 0x7c, 0x22, 0x2f, 0xdd,
	0xc9, 0xaa, 0xb2, 0x4e, 0x9a, 0x4c, 0xff, 0x01, 0xac, 0xe1, 0x6a, 0x20, 0xdf, 0x3b, 0xb6, 0xc2,
	0xa3, 0x51, 0xab, 0x18, 0xfd, 0x8f, 0x10, 0x21, 0x97, 0xee, 0xc3, 0xab, 0xcb, 0x3a, 0x6b, 0x2a,
	0x1d, 0xf5, 0xd3, 0x33, 0x54, 0x73, 0x99, 0x3d, 0x1b, 0xdc, 0xc1, 0xea, 0xe5, 0x9b, 0xfa, 0x20,
	0x84, 0x77, 0xed, 0x34, 0x40, 0x7b, 0x56, 0x74, 0x73, 0x3b, 0xc3, 0x3d, 0x1b, 0xbd, 0xec, 0xb2,
	0xbd, 0x78, 0x2f, 0xe3, 0x2c, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xcb, 0x97, 0xc9,
	0x44, 0x01, 0x00, 0x00,
}
