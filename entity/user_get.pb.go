// Code generated by protoc-gen-go.
// source: user_get.proto
// DO NOT EDIT!

package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserIdRequest) Reset()                    { *m = UserIdRequest{} }
func (m *UserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*UserIdRequest) ProtoMessage()               {}
func (*UserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *UserIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UserTokenRequest) Reset()                    { *m = UserTokenRequest{} }
func (m *UserTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UserTokenRequest) ProtoMessage()               {}
func (*UserTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *UserTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*UserIdRequest)(nil), "entity.UserIdRequest")
	proto.RegisterType((*UserTokenRequest)(nil), "entity.UserTokenRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GetUser service

type GetUserClient interface {
	GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetByToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type getUserClient struct {
	cc *grpc.ClientConn
}

func NewGetUserClient(cc *grpc.ClientConn) GetUserClient {
	return &getUserClient{cc}
}

func (c *getUserClient) GetById(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/entity.GetUser/GetById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUserClient) GetByToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/entity.GetUser/GetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetUser service

type GetUserServer interface {
	GetById(context.Context, *UserIdRequest) (*UserResponse, error)
	GetByToken(context.Context, *UserTokenRequest) (*UserResponse, error)
}

func RegisterGetUserServer(s *grpc.Server, srv GetUserServer) {
	s.RegisterService(&_GetUser_serviceDesc, srv)
}

func _GetUser_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GetUser/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserServer).GetById(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetUser_GetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserServer).GetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.GetUser/GetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserServer).GetByToken(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entity.GetUser",
	HandlerType: (*GetUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _GetUser_GetById_Handler,
		},
		{
			MethodName: "GetByToken",
			Handler:    _GetUser_GetByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_get.proto",
}

func init() { proto.RegisterFile("user_get.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0x4f, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcd, 0x2b, 0xc9,
	0x2c, 0xa9, 0x94, 0x12, 0x2e, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x8d, 0x07, 0x29, 0x80,
	0x48, 0x2a, 0xc9, 0x73, 0xf1, 0x86, 0x16, 0xa7, 0x16, 0x79, 0xa6, 0x04, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31,
	0x65, 0xa6, 0x28, 0x69, 0x70, 0x09, 0x80, 0x14, 0x84, 0xe4, 0x67, 0xa7, 0xe6, 0xc1, 0xd4, 0x88,
	0x70, 0xb1, 0x96, 0x80, 0xf8, 0x60, 0x65, 0x9c, 0x41, 0x10, 0x8e, 0x51, 0x33, 0x23, 0x17, 0xbb,
	0x7b, 0x6a, 0x09, 0x48, 0xb5, 0x90, 0x05, 0x98, 0xe9, 0x54, 0xe9, 0x99, 0x22, 0x24, 0xaa, 0x07,
	0xb1, 0x5f, 0x0f, 0xc5, 0x1e, 0x29, 0x11, 0x64, 0xe1, 0x20, 0xa8, 0xcb, 0x94, 0x18, 0x84, 0xec,
	0xb8, 0xb8, 0xc0, 0x3a, 0xc1, 0x16, 0x0a, 0x49, 0x20, 0xab, 0x42, 0x76, 0x03, 0x2e, 0xfd, 0x49,
	0x6c, 0x60, 0x7f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x98, 0xf1, 0x14, 0x06, 0x01,
	0x00, 0x00,
}
